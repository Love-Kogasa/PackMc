// Generated by LiveScript 1.6.0
(function(){
  var manifest, texture, item, block, util, json, fs, PackMc, out$ = typeof exports != 'undefined' && exports || this;
  manifest = require('./manifest');
  texture = require('./texture');
  item = require('./item');
  block = require('./block');
  util = require('./util');
  json = require('./json');
  fs = require('fs');
  out$.PackMc = PackMc = (function(){
    PackMc.displayName = 'PackMc';
    var prototype = PackMc.prototype, constructor = PackMc;
    function PackMc(manifest, dir){
      dir == null && (dir = __dirname);
      this.dirtree = [];
      this.dir = dir;
      this.dirtree.push([dir + "/manifest.json", "json", manifest]);
    }
    PackMc.prototype.add = function(fname, data){
      var dir;
      dir = this.dir;
      if (typeof data === "object" && typeof data.toJSON === "undefined") {
        this.dirtree.push([dir + "" + fname, "json", data]);
      } else {
        this.dirtree.push([dir + "" + fname, "text", data]);
      }
      return this;
    };
    PackMc.prototype.icon = function(path){
      this.add("/pack_icon.png", fs.readFileSync(path));
      return this;
    };
    PackMc.prototype.adddir = function(dir){
      if (!fs.existsSync(this.dir + "" + dir)) {
        fs.mkdirSync(this.dir + "" + dir);
      }
      return this;
    };
    PackMc.prototype.pack = function(){
      var i$, ref$, len$, file, fname, type, data;
      for (i$ = 0, len$ = (ref$ = this.dirtree).length; i$ < len$; ++i$) {
        file = ref$[i$];
        fname = file[0], type = file[1], data = file[2];
        if (type === "json") {
          json.write(fname, data);
        } else {
          fs.writeFileSync(fname, data);
        }
      }
      return this;
    };
    return PackMc;
  }());
  out$.manifest = manifest.manifest;
  out$.item = item.item;
  out$.block = block.block;
  out$.textures = texture.textures;
  out$.util = util;
}).call(this);
