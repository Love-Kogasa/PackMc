// Generated by LiveScript 1.6.0
(function(){
  var fs, out$ = typeof exports != 'undefined' && exports || this;
  fs = require('fs');
  out$.read = read;
  function read(it){
    return JSON.parse(fs.readFileSync(it).toString("utf-8"));
  }
  out$.write = write;
  function write(name, data){
    return fs.writeFileSync(name, JSON.stringify(data));
  }
  out$.copy = copy;
  function copy(){
    var jsons, res$, i$, to$, retV, len$, json, objdo;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    jsons = res$;
    retV = {};
    for (i$ = 0, len$ = jsons.length; i$ < len$; ++i$) {
      json = jsons[i$];
      objdo = fn$;
      retV = import$(clone$(retv), objdo(json));
    }
    return retV;
    function fn$(obj){
      var retv, i$, ref$, len$, key;
      retv = {};
      for (i$ = 0, len$ = (ref$ = Object.keys(obj)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        retv[key] == null && (retv[key] = obj[key]);
        retv[key] = typeof key === "object"
          ? objdo(key)
          : import$(clone$(retv[key]), obj[key]);
      }
      return retv;
    }
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
