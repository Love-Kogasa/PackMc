// Generated by LiveScript 1.6.0
(function(){
  var uuid, json, out$ = typeof exports != 'undefined' && exports || this;
  uuid = require('./uuid');
  json = require('./json');
  out$.manifestJson = manifestJson;
  function manifestJson(it){
    return json.read(it);
  }
  out$.manifest = manifest;
  function manifest(info){
    var table;
    table = {
      format: 2,
      name: "pack.name",
      description: "pack.description",
      type: "data",
      version: [0, 0, 1],
      min_version: [1, 13, 20]
    };
    table = import$(clone$(table), info);
    return {
      format_version: table.format,
      header: {
        name: table.name,
        description: table.description,
        uuid: uuid(),
        version: table.version,
        min_engine_version: table.min_version
      },
      modules: new Array({
        type: table.type,
        uuid: uuid(),
        version: table.version
      })
    };
  }
  manifest.type = function(type, name, description, version, min_version){
    var format;
    version == null && (version = [0, 0, 1]);
    min_version == null && (min_version = [1, 13, 20]);
    return this((format = min_version[1] > 12 ? 2 : 1, {
      name: name,
      description: description,
      version: version,
      min_version: min_version,
      type: type
    }));
  };
  manifest.res = function(name, description, version, min_version){
    return this.type("resources", name, description, version, min_version);
  };
  manifest.beh = function(name, description, version, min_version){
    return this.type("data", name, description, version, min_version);
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
